
USER_APPLICATION1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d6  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000025e  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000145  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077d  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a8e8  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000074  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000be74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002741  00000000  00000000  0000bec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	36 d0       	rcall	.+108    	; 0xce <main>
  62:	37 c0       	rjmp	.+110    	; 0xd2 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <pressed>:
		//}
	return 0;
}
_Bool pressed(int col, int row)
{
	return (GET_BIT(PINC, col));
  66:	43 b3       	in	r20, 0x13	; 19
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	b9 01       	movw	r22, r18
  6e:	02 c0       	rjmp	.+4      	; 0x74 <pressed+0xe>
  70:	66 0f       	add	r22, r22
  72:	77 1f       	adc	r23, r23
  74:	8a 95       	dec	r24
  76:	e2 f7       	brpl	.-8      	; 0x70 <pressed+0xa>
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	9b 01       	movw	r18, r22
  7c:	24 23       	and	r18, r20
  7e:	35 23       	and	r19, r21
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	23 2b       	or	r18, r19
  84:	09 f4       	brne	.+2      	; 0x88 <pressed+0x22>
  86:	80 e0       	ldi	r24, 0x00	; 0
}
  88:	08 95       	ret

0000008a <get_key>:
	}
	

}
int get_key(void){
	if(pressed(7,0))
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	e9 df       	rcall	.-46     	; 0x66 <pressed>
  94:	88 23       	and	r24, r24
  96:	11 f0       	breq	.+4      	; 0x9c <get_key+0x12>
	{
		CLR_BIT(PORTB,0);
  98:	c0 98       	cbi	0x18, 0	; 24
  9a:	01 c0       	rjmp	.+2      	; 0x9e <get_key+0x14>
	}
	else
	{
		SET_BIT(PORTB,0);
  9c:	c0 9a       	sbi	0x18, 0	; 24
			//SET_BIT(PORTB,0);
			//else
			//CLR_BIT(PORTB,0);
		//}
	return 0;
}
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret

000000a4 <read_keyPad>:
	// Insert application code here, after the board has been initialized.
}
void
read_keyPad(void)
{
	CLR_BIT(PORTC, 0);
  a4:	a8 98       	cbi	0x15, 0	; 21
	CLR_BIT(PORTC, 1);
  a6:	a9 98       	cbi	0x15, 1	; 21
	CLR_BIT(PORTC, 2);
  a8:	aa 98       	cbi	0x15, 2	; 21
	CLR_BIT(PORTC, 3);
  aa:	ab 98       	cbi	0x15, 3	; 21
	SET_BIT(PORTC, 4);
  ac:	ac 9a       	sbi	0x15, 4	; 21
	SET_BIT(PORTC, 5);
  ae:	ad 9a       	sbi	0x15, 5	; 21
	SET_BIT(PORTC, 6);
  b0:	ae 9a       	sbi	0x15, 6	; 21
	SET_BIT(PORTC, 7);
  b2:	af 9a       	sbi	0x15, 7	; 21
	
	for(;;)
	{
		get_key();
  b4:	ea df       	rcall	.-44     	; 0x8a <get_key>
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <read_keyPad+0x10>

000000b8 <ini_avr>:
}
void
ini_avr(void)
{
	// init LED
	SET_BIT(DDRB, 0);
  b8:	b8 9a       	sbi	0x17, 0	; 23
	CLR_BIT(DDRB, 1);
  ba:	b9 98       	cbi	0x17, 1	; 23
	
	// init keypad
	SET_BIT(DDRC, 0);
  bc:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC, 1);
  be:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(DDRC, 2);
  c0:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC, 3);
  c2:	a3 9a       	sbi	0x14, 3	; 20
	CLR_BIT(DDRC, 4);
  c4:	a4 98       	cbi	0x14, 4	; 20
	CLR_BIT(DDRC, 5);
  c6:	a5 98       	cbi	0x14, 5	; 20
	CLR_BIT(DDRC, 6);
  c8:	a6 98       	cbi	0x14, 6	; 20
	CLR_BIT(DDRC, 7);
  ca:	a7 98       	cbi	0x14, 7	; 20
  cc:	08 95       	ret

000000ce <main>:



int main (void)
{
	ini_avr();
  ce:	f4 df       	rcall	.-24     	; 0xb8 <ini_avr>
	//start_led();
	read_keyPad();
  d0:	e9 df       	rcall	.-46     	; 0xa4 <read_keyPad>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
