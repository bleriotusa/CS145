
USER_APPLICATION1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000848  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c8  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf0  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa18  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046f  00000000  00000000  0000ceec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000d35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002841  00000000  00000000  0000d433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	07 d0       	rcall	.+14     	; 0x86 <main>
  78:	5f c0       	rjmp	.+190    	; 0x138 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <LCD>:
	CLR_BIT(DDRC, 6);
	CLR_BIT(DDRC, 7);
	SET_BIT(DDRC, 0);
	SET_BIT(DDRC, 1);
	SET_BIT(DDRC, 2);
	SET_BIT(DDRC, 3);
  7c:	31 d0       	rcall	.+98     	; 0xe0 <ini_lcd>
  7e:	80 e6       	ldi	r24, 0x60	; 96
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	4c d0       	rcall	.+152    	; 0x11c <put_str_lcd>
  84:	ff cf       	rjmp	.-2      	; 0x84 <LCD+0x8>

00000086 <main>:
  86:	fa df       	rcall	.-12     	; 0x7c <LCD>

00000088 <wait_avr>:
}

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  88:	23 e0       	ldi	r18, 0x03	; 3
  8a:	23 bf       	out	0x33, r18	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  8c:	33 e8       	ldi	r19, 0x83	; 131

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  8e:	07 c0       	rjmp	.+14     	; 0x9e <wait_avr+0x16>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  90:	32 bf       	out	0x32, r19	; 50
    SET_BIT(TIFR, TOV0);
  92:	28 b7       	in	r18, 0x38	; 56
  94:	21 60       	ori	r18, 0x01	; 1
  96:	28 bf       	out	0x38, r18	; 56
    while (!GET_BIT(TIFR, TOV0));
  98:	08 b6       	in	r0, 0x38	; 56
  9a:	00 fe       	sbrs	r0, 0
  9c:	fd cf       	rjmp	.-6      	; 0x98 <wait_avr+0x10>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	b8 f7       	brcc	.-18     	; 0x90 <wait_avr+0x8>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
    SET_BIT(TIFR, TOV0);
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <output>:
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
  }
}
  a6:	66 23       	and	r22, r22
  a8:	11 f0       	breq	.+4      	; 0xae <output+0x8>
  aa:	c2 9a       	sbi	0x18, 2	; 24
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <output+0xa>
  ae:	c2 98       	cbi	0x18, 2	; 24
  b0:	c3 98       	cbi	0x18, 3	; 24
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
  b8:	c4 9a       	sbi	0x18, 4	; 24
  ba:	00 00       	nop
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	c4 98       	cbi	0x18, 4	; 24
  c2:	08 95       	ret

000000c4 <write>:
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	c3 9a       	sbi	0x18, 3	; 24
  c8:	11 ba       	out	0x11, r1	; 17
  ca:	90 b3       	in	r25, 0x10	; 16
  cc:	c4 9a       	sbi	0x18, 4	; 24
  ce:	00 00       	nop
  d0:	00 00       	nop
  d2:	00 00       	nop
  d4:	11 ba       	out	0x11, r1	; 17
  d6:	90 b3       	in	r25, 0x10	; 16
  d8:	c4 98       	cbi	0x18, 4	; 24
  da:	99 23       	and	r25, r25
  dc:	9c f3       	brlt	.-26     	; 0xc4 <write>
  de:	e3 cf       	rjmp	.-58     	; 0xa6 <output>

000000e0 <ini_lcd>:
  e0:	ba 9a       	sbi	0x17, 2	; 23
  e2:	bb 9a       	sbi	0x17, 3	; 23
  e4:	bc 9a       	sbi	0x17, 4	; 23
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	ce df       	rcall	.-100    	; 0x88 <wait_avr>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	da df       	rcall	.-76     	; 0xa6 <output>
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	c8 df       	rcall	.-112    	; 0x88 <wait_avr>
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 e3       	ldi	r24, 0x30	; 48
  fc:	d4 df       	rcall	.-88     	; 0xa6 <output>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	c2 df       	rcall	.-124    	; 0x88 <wait_avr>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	8c e3       	ldi	r24, 0x3C	; 60
 108:	dd df       	rcall	.-70     	; 0xc4 <write>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	da df       	rcall	.-76     	; 0xc4 <write>
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	d7 df       	rcall	.-82     	; 0xc4 <write>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <write>

0000011c <put_str_lcd>:

void
put_str_lcd(const char *s)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
 120:	ec 01       	movw	r28, r24
 122:	89 91       	ld	r24, Y+
 124:	88 23       	and	r24, r24
 126:	29 f0       	breq	.+10     	; 0x132 <put_str_lcd+0x16>
    write(c, 1);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	cc df       	rcall	.-104    	; 0xc4 <write>

void
put_str_lcd(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <put_str_lcd+0xc>
    write(c, 1);
  }
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
