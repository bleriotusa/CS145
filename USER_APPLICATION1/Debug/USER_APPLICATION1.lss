
USER_APPLICATION1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f8  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000039e  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbb  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa0a  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000431  00000000  00000000  0000ce96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000d2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002841  00000000  00000000  0000d39f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	a1 d0       	rcall	.+322    	; 0x1a4 <main>
  62:	a2 c0       	rjmp	.+324    	; 0x1a8 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <pressed>:
		}
		else{
			SET_BIT(PORTB, 0);
			wait_avr(msec);
			CLR_BIT(PORTB, 0);
			wait_avr(msec);
  66:	95 b3       	in	r25, 0x15	; 21
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	9a 01       	movw	r18, r20
  6e:	08 2e       	mov	r0, r24
  70:	02 c0       	rjmp	.+4      	; 0x76 <pressed+0x10>
  72:	22 0f       	add	r18, r18
  74:	33 1f       	adc	r19, r19
  76:	0a 94       	dec	r0
  78:	e2 f7       	brpl	.-8      	; 0x72 <pressed+0xc>
  7a:	20 95       	com	r18
  7c:	29 23       	and	r18, r25
  7e:	25 bb       	out	0x15, r18	; 21
  80:	23 b3       	in	r18, 0x13	; 19
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	a9 01       	movw	r20, r18
  86:	02 c0       	rjmp	.+4      	; 0x8c <pressed+0x26>
  88:	55 95       	asr	r21
  8a:	47 95       	ror	r20
  8c:	8a 95       	dec	r24
  8e:	e2 f7       	brpl	.-8      	; 0x88 <pressed+0x22>
  90:	40 fd       	sbrc	r20, 0
  92:	0f c0       	rjmp	.+30     	; 0xb2 <pressed+0x4c>
  94:	83 b3       	in	r24, 0x13	; 19
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9c 01       	movw	r18, r24
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <pressed+0x3a>
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <pressed+0x36>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	20 ff       	sbrs	r18, 0
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <pressed+0x50>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pressed+0x50>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <get_key>:
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	04 e0       	ldi	r16, 0x04	; 4
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	e1 2c       	mov	r14, r1
  cc:	f1 2c       	mov	r15, r1
  ce:	16 c0       	rjmp	.+44     	; 0xfc <get_key+0x42>
  d0:	b8 01       	movw	r22, r16
  d2:	ce 01       	movw	r24, r28
  d4:	c8 df       	rcall	.-112    	; 0x66 <pressed>
  d6:	88 23       	and	r24, r24
  d8:	41 f0       	breq	.+16     	; 0xea <get_key+0x30>
  da:	00 0f       	add	r16, r16
  dc:	11 1f       	adc	r17, r17
  de:	00 0f       	add	r16, r16
  e0:	11 1f       	adc	r17, r17
  e2:	c0 0f       	add	r28, r16
  e4:	d1 1f       	adc	r29, r17
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	0d c0       	rjmp	.+26     	; 0x104 <get_key+0x4a>
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	c4 30       	cpi	r28, 0x04	; 4
  ee:	d1 05       	cpc	r29, r1
  f0:	79 f7       	brne	.-34     	; 0xd0 <get_key+0x16>
  f2:	0f 5f       	subi	r16, 0xFF	; 255
  f4:	1f 4f       	sbci	r17, 0xFF	; 255
  f6:	08 30       	cpi	r16, 0x08	; 8
  f8:	11 05       	cpc	r17, r1
  fa:	11 f0       	breq	.+4      	; 0x100 <get_key+0x46>
  fc:	e7 01       	movw	r28, r14
  fe:	e8 cf       	rjmp	.-48     	; 0xd0 <get_key+0x16>
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	8c 2f       	mov	r24, r28
 106:	9d 2f       	mov	r25, r29
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	08 95       	ret

00000116 <ini_avr>:
 116:	b8 9a       	sbi	0x17, 0	; 23
 118:	b9 98       	cbi	0x17, 1	; 23
 11a:	a4 98       	cbi	0x14, 4	; 20
 11c:	a5 98       	cbi	0x14, 5	; 20
 11e:	a6 98       	cbi	0x14, 6	; 20
 120:	a7 98       	cbi	0x14, 7	; 20
 122:	a0 9a       	sbi	0x14, 0	; 20
 124:	a1 9a       	sbi	0x14, 1	; 20
 126:	a2 9a       	sbi	0x14, 2	; 20
 128:	a3 9a       	sbi	0x14, 3	; 20
 12a:	08 95       	ret

0000012c <wait_avr>:
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	23 bf       	out	0x33, r18	; 51
 130:	33 e8       	ldi	r19, 0x83	; 131
 132:	07 c0       	rjmp	.+14     	; 0x142 <wait_avr+0x16>
 134:	32 bf       	out	0x32, r19	; 50
 136:	28 b7       	in	r18, 0x38	; 56
 138:	21 60       	ori	r18, 0x01	; 1
 13a:	28 bf       	out	0x38, r18	; 56
 13c:	08 b6       	in	r0, 0x38	; 56
 13e:	00 fe       	sbrs	r0, 0
 140:	fd cf       	rjmp	.-6      	; 0x13c <wait_avr+0x10>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	b8 f7       	brcc	.-18     	; 0x134 <wait_avr+0x8>
 146:	13 be       	out	0x33, r1	; 51
 148:	08 95       	ret

0000014a <blinkNTimes>:
		}
	}
	return 0;
}
void blinkNTimes(int n)
{	int msec = 500;
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	8c 01       	movw	r16, r24
	SET_BIT(PORTB, 0);
 154:	c0 9a       	sbi	0x18, 0	; 24

	for(int i = 0; i < n; i++)
 156:	18 16       	cp	r1, r24
 158:	19 06       	cpc	r1, r25
 15a:	74 f4       	brge	.+28     	; 0x178 <blinkNTimes+0x2e>
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SET_BIT(PORTB, 0);
 160:	c0 9a       	sbi	0x18, 0	; 24
		wait_avr(msec);
 162:	84 ef       	ldi	r24, 0xF4	; 244
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	e2 df       	rcall	.-60     	; 0x12c <wait_avr>
		CLR_BIT(PORTB, 0);
 168:	c0 98       	cbi	0x18, 0	; 24
		wait_avr(msec);
 16a:	84 ef       	ldi	r24, 0xF4	; 244
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	de df       	rcall	.-68     	; 0x12c <wait_avr>
}
void blinkNTimes(int n)
{	int msec = 500;
	SET_BIT(PORTB, 0);

	for(int i = 0; i < n; i++)
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	c0 17       	cp	r28, r16
 174:	d1 07       	cpc	r29, r17
 176:	a1 f7       	brne	.-24     	; 0x160 <blinkNTimes+0x16>
		wait_avr(msec);
		CLR_BIT(PORTB, 0);
		wait_avr(msec);
	}
		
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <read_keyPad>:
	put_lcd('!');
}
void
read_keyPad(void)
{
	SET_BIT(PORTC, 7);
 182:	af 9a       	sbi	0x15, 7	; 21
	SET_BIT(PORTC, 6);
 184:	ae 9a       	sbi	0x15, 6	; 21
	SET_BIT(PORTC, 5);
 186:	ad 9a       	sbi	0x15, 5	; 21
	SET_BIT(PORTC, 4);
 188:	ac 9a       	sbi	0x15, 4	; 21
	SET_BIT(PORTC, 3);
 18a:	ab 9a       	sbi	0x15, 3	; 21
	SET_BIT(PORTC, 2);
 18c:	aa 9a       	sbi	0x15, 2	; 21
	SET_BIT(PORTC, 1);
 18e:	a9 9a       	sbi	0x15, 1	; 21
	SET_BIT(PORTC, 0);
 190:	a8 9a       	sbi	0x15, 0	; 21
	
	for(;;)
	{
		if(get_key()>0)
 192:	93 df       	rcall	.-218    	; 0xba <get_key>
 194:	18 16       	cp	r1, r24
 196:	19 06       	cpc	r1, r25
 198:	1c f4       	brge	.+6      	; 0x1a0 <read_keyPad+0x1e>
		{
			blinkNTimes(get_key());
 19a:	8f df       	rcall	.-226    	; 0xba <get_key>
 19c:	d6 df       	rcall	.-84     	; 0x14a <blinkNTimes>
 19e:	f9 cf       	rjmp	.-14     	; 0x192 <read_keyPad+0x10>
			//SET_BIT(PORTB, 0);
		}
		else
			CLR_BIT(PORTB, 0);
 1a0:	c0 98       	cbi	0x18, 0	; 24
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <read_keyPad+0x10>

000001a4 <main>:
#include "lcd.h"


int main (void)
{
	ini_avr();
 1a4:	b8 df       	rcall	.-144    	; 0x116 <ini_avr>
	//start_led();
	read_keyPad();
 1a6:	ed df       	rcall	.-38     	; 0x182 <read_keyPad>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
