
USER_APPLICATION1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001eb  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014e  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074d  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a8d8  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004c  00000000  00000000  0000bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002741  00000000  00000000  0000bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	2c d0       	rcall	.+88     	; 0xba <main>
  62:	2d c0       	rjmp	.+90     	; 0xbe <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <read_keyPad>:
	// Insert application code here, after the board has been initialized.
}
void
read_keyPad(void)
{
	CLR_BIT(PORTC, 7);
  66:	af 98       	cbi	0x15, 7	; 21
	CLR_BIT(PORTC, 6);
  68:	ae 98       	cbi	0x15, 6	; 21
	CLR_BIT(PORTC, 5);
  6a:	ad 98       	cbi	0x15, 5	; 21
	CLR_BIT(PORTC, 4);
  6c:	ac 98       	cbi	0x15, 4	; 21
	SET_BIT(PORTC, 3);
  6e:	ab 9a       	sbi	0x15, 3	; 21
	SET_BIT(PORTC, 2);
  70:	aa 9a       	sbi	0x15, 2	; 21
	SET_BIT(PORTC, 1);
  72:	a9 9a       	sbi	0x15, 1	; 21
	SET_BIT(PORTC, 0);
  74:	a8 9a       	sbi	0x15, 0	; 21
	
	for(;;)
	{
		for(int i = 0; i < 8; i++)
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	50 e0       	ldi	r21, 0x00	; 0
		{
			if(GET_BIT(PINC, i)){
  7e:	23 b3       	in	r18, 0x13	; 19
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	08 2e       	mov	r0, r24
  84:	02 c0       	rjmp	.+4      	; 0x8a <read_keyPad+0x24>
  86:	35 95       	asr	r19
  88:	27 95       	ror	r18
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <read_keyPad+0x20>
  8e:	20 ff       	sbrs	r18, 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <read_keyPad+0x30>
				CLR_BIT(PORTB, 0);
  92:	c0 98       	cbi	0x18, 0	; 24
  94:	01 c0       	rjmp	.+2      	; 0x98 <read_keyPad+0x32>
				
			}
			else{
				
				SET_BIT(PORTB, 0);
  96:	c0 9a       	sbi	0x18, 0	; 24
	SET_BIT(PORTC, 1);
	SET_BIT(PORTC, 0);
	
	for(;;)
	{
		for(int i = 0; i < 8; i++)
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	91 05       	cpc	r25, r1
  9e:	7c f3       	brlt	.-34     	; 0x7e <read_keyPad+0x18>
  a0:	ca 01       	movw	r24, r20
  a2:	ed cf       	rjmp	.-38     	; 0x7e <read_keyPad+0x18>

000000a4 <ini_avr>:
}
void
ini_avr(void)
{
	// init LED
	SET_BIT(DDRB, 0);
  a4:	b8 9a       	sbi	0x17, 0	; 23
	CLR_BIT(DDRB, 1);
  a6:	b9 98       	cbi	0x17, 1	; 23
	
	// init keypad
	SET_BIT(DDRC, 7);
  a8:	a7 9a       	sbi	0x14, 7	; 20
	SET_BIT(DDRC, 6);
  aa:	a6 9a       	sbi	0x14, 6	; 20
	SET_BIT(DDRC, 5);
  ac:	a5 9a       	sbi	0x14, 5	; 20
	SET_BIT(DDRC, 4);
  ae:	a4 9a       	sbi	0x14, 4	; 20
	CLR_BIT(DDRC, 3);
  b0:	a3 98       	cbi	0x14, 3	; 20
	CLR_BIT(DDRC, 2);
  b2:	a2 98       	cbi	0x14, 2	; 20
	CLR_BIT(DDRC, 1);
  b4:	a1 98       	cbi	0x14, 1	; 20
	CLR_BIT(DDRC, 0);
  b6:	a0 98       	cbi	0x14, 0	; 20
  b8:	08 95       	ret

000000ba <main>:



int main (void)
{
	ini_avr();
  ba:	f4 df       	rcall	.-24     	; 0xa4 <ini_avr>
	//start_led();
	read_keyPad();
  bc:	d4 df       	rcall	.-88     	; 0x66 <read_keyPad>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
